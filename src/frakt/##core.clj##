(ns frakt.core
  (:require [frakt.color :as color]
            [frakt.canvas :as canvas]
            [clojure.java.io :as io]
            [clojure.math :as math]))

(defn write-canvas-to-ppm-file
  [canvas filename]
  (let [ppm-bytes (canvas/canvas-to-p6-ppm canvas)]
    (with-open [out (io/output-stream filename)] (.write out ppm-bytes))))


;; y = mx + b
(defn- draw-line-low
  [canvas x0 y0 x1 y1 color]
  (let [start (min x0 x1)
        end (inc (max x0 x1))
        m (/ (- y0 y1) (- x0 x1))
        ;; y = mx + b => b = y - mx
        b (- y0 (* m x0))]
    (reduce (fn [c x] (canvas/write-pixel c x (math/round (+ b (* m x))) color))
      canvas
      (range start end))))

;; x = (y - b) / m
(defn- draw-line-high
  [canvas x0 y0 x1 y1 color]
  (let [start (min y0 y1)
        end (inc (max y0 y1))
        m (/ (- y0 y1) (- x0 x1))
        ;; y = mx + b => b = y - mx
        b (- y0 (* m x0))]
    (reduce (fn [c y] (canvas/write-pixel c (math/round (/ (- y b) m)) y color))
      canvas
      (range start end))))

(defn- draw-line-vert
  [canvas x y0 y1 color]
  (let [start (min y0 y1)
        end (inc (max y0 y1))]
    (reduce (fn [c y] (canvas/write-pixel c x y color))
      canvas
      (range start end))))

;; m = (y0 - y1) / (x0 - x1)
(defn draw-line
  [canvas x0 y0 x1 y1 color]
  (let [dx (- x0 x1)
        dy (- y0 y1)]
    (cond (zero? dx) (draw-line-vert canvas x0 y0 y1 color)
          (>= (abs dx) (abs dy)) (draw-line-low canvas x0 y0 x1 y1 color)
          :else (draw-line-high canvas x0 y0 x1 y1 color))))

(def triangle
  (-> (canvas/canvas 300 200)
      (draw-line 150 10 10 190 color/red)
      (draw-line 10 190 290 190 color/green)
      (draw-line 150 10 290 190 color/blue)))

(defn main [& _args] (write-canvas-to-ppm-file triangle "frakt-core.ppm"))
